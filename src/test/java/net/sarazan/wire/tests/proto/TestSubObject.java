// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: resources/proto/Test.proto
package net.sarazan.wire.tests.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.STRING;

public final class TestSubObject extends Message {

  public static final String DEFAULT_FIRST = "";
  public static final String DEFAULT_SECOND = "";
  public static final String DEFAULT_THIRD = "";

  @ProtoField(tag = 1, type = STRING)
  public final String first;

  @ProtoField(tag = 2, type = STRING)
  public final String second;

  @ProtoField(tag = 3, type = STRING)
  public final String third;

  public TestSubObject(String first, String second, String third) {
    this.first = first;
    this.second = second;
    this.third = third;
  }

  private TestSubObject(Builder builder) {
    this(builder.first, builder.second, builder.third);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TestSubObject)) return false;
    TestSubObject o = (TestSubObject) other;
    return equals(first, o.first)
        && equals(second, o.second)
        && equals(third, o.third);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = first != null ? first.hashCode() : 0;
      result = result * 37 + (second != null ? second.hashCode() : 0);
      result = result * 37 + (third != null ? third.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TestSubObject> {

    public String first;
    public String second;
    public String third;

    public Builder() {
    }

    public Builder(TestSubObject message) {
      super(message);
      if (message == null) return;
      this.first = message.first;
      this.second = message.second;
      this.third = message.third;
    }

    public Builder first(String first) {
      this.first = first;
      return this;
    }

    public Builder second(String second) {
      this.second = second;
      return this;
    }

    public Builder third(String third) {
      this.third = third;
      return this;
    }

    @Override
    public TestSubObject build() {
      return new TestSubObject(this);
    }
  }
}
