// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: resources/proto/Test.proto
package net.sarazan.wire.tests.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;

public final class TestObject extends Message {

  public static final String DEFAULT_NAME = "";
  public static final Long DEFAULT_AGE = 0L;

  @ProtoField(tag = 1, type = STRING)
  public final String name;

  @ProtoField(tag = 2, type = INT64)
  public final Long age;

  @ProtoField(tag = 3)
  public final TestSubObject sub;

  public TestObject(String name, Long age, TestSubObject sub) {
    this.name = name;
    this.age = age;
    this.sub = sub;
  }

  private TestObject(Builder builder) {
    this(builder.name, builder.age, builder.sub);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TestObject)) return false;
    TestObject o = (TestObject) other;
    return equals(name, o.name)
        && equals(age, o.age)
        && equals(sub, o.sub);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = name != null ? name.hashCode() : 0;
      result = result * 37 + (age != null ? age.hashCode() : 0);
      result = result * 37 + (sub != null ? sub.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TestObject> {

    public String name;
    public Long age;
    public TestSubObject sub;

    public Builder() {
    }

    public Builder(TestObject message) {
      super(message);
      if (message == null) return;
      this.name = message.name;
      this.age = message.age;
      this.sub = message.sub;
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder age(Long age) {
      this.age = age;
      return this;
    }

    public Builder sub(TestSubObject sub) {
      this.sub = sub;
      return this;
    }

    @Override
    public TestObject build() {
      return new TestObject(this);
    }
  }
}
